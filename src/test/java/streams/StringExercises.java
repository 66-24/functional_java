package streams;

import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.function.Function;

public class StringExercises {
    private final List<String> strings = Arrays.asList("this", "is", "a",
            "list", "of", "strings");

    @Test
    public void stringLengthSort_InnerClass() {     // Java 5, 6, 7
        strings.sort(new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                return s1.length() - s2.length();
            }
        });
        System.out.println(strings);
    }

    @Test
    public void stringLengthSort_lambda() {

    }

    private int compareStrings(String s1, String s2) {
        return s1.length() - s2.length();
    }

    @Test  // Use a lambda that calls 'compareStrings' directly
    public void stringLengthSort_methodCall() {

    }

    @Test  // Use a method ref to 'compareStrings'
    public void stringLengthSort_methodRef() {

    }

    @Test  // Use Comparator.comparingInt
    public void stringLengthSort_comparingInt() {

    }

    @Test
    public void demoCollectors() {

        // f: A -> B, g: B -> C, (g.f)(x) = g(f(x)), A -> C
    }

    // generated by GitHub Copilot, but looks good
    private <A, B, C> Function<A, C> compose(Function<A, B> f, Function<B, C> g) {
        return x -> g.apply(f.apply(x));
    }

}
