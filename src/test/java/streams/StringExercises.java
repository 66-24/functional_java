package streams;

import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.logging.Logger;
import java.util.stream.Collectors;

public class StringExercises {
    private final List<String> strings = Arrays.asList("this", "is", "a",
            "list", "of", "strings");

    @SuppressWarnings("Convert2Lambda")
    @Test
    public void stringLengthSort_InnerClass() {     // Java 5, 6, 7
        strings.sort(new Comparator<>() {
            @Override
            public int compare(String s1, String s2) {
                return s1.length() - s2.length();
            }
        });
        System.out.println(strings);
    }

    @Test
    public void stringLengthSort_lambda() {
        strings.stream()
                .sorted((s1, s2) -> s2.length() - s1.length())
                .forEach(System.out::println);
    }

    private int compareStrings(String s1, String s2) {
        return s1.length() - s2.length();
    }

    @SuppressWarnings("Convert2MethodRef")
    @Test  // Use a lambda that calls 'compareStrings' directly
    public void stringLengthSort_methodCall() {
        strings.stream()
                .sorted((s1, s2) -> compareStrings(s1, s2))
                // .sorted(this::compareStrings)
                .forEach(System.out::println);
    }

    @Test  // Use a method ref to 'compareStrings'
    public void stringLengthSort_methodRef() {
        strings.stream()
                // .sorted((s1, s2) -> compareStrings(s1, s2))
                .sorted(this::compareStrings)
                .forEach(System.out::println);
    }

    @Test  // Use Comparator.comparingInt
    public void stringLengthSort_comparingInt() {
        strings.stream()
                .sorted(Comparator.comparingInt(String::length)
                        .thenComparing(Comparator.naturalOrder()))
                .forEach(System.out::println);
    }

    @Test
    public void demoCollectors() {
        // Get only strings of even length
        // Add them to a LinkedList
        LinkedList<String> evens = strings.stream()
                .filter(s -> s.length() % 2 == 0)
                //.collect(Collectors.toCollection(() -> new LinkedList<>()));
                .collect(Collectors.toCollection(LinkedList::new));
        System.out.println(evens);
        System.out.println(evens.getClass().getName());

        // Add the strings to a map of string to length
        Map<String, Integer> map = strings.stream()
                .distinct()
                // .collect(Collectors.toMap(s -> s, String::length));
                .collect(Collectors.toMap(Function.identity(), String::length));
        System.out.println(map);

        // Filter out nulls, then print even-length strings
        List<String> stringsWithNulls = Arrays.asList("this", null, "is",
                "a", null, "list", "of", null, "strings");
        Logger logger = Logger.getLogger("demoCollectors");
        stringsWithNulls.stream()
                // .filter(s -> s != null && s.length() % 2 == 0) // use short-circuiting logical AND
                // .filter(s -> s != null)
                .peek(x -> logger.fine(() -> "Before null filter: " + x))
                .filter(Objects::nonNull)
                .peek(x -> logger.fine(() -> "After null filter, before even length filter: " + x))
                .filter(s -> s.length() % 2 == 0)
                .peek(x -> logger.fine(() -> "After even length filter: " + x))
                .forEach(System.out::println);

        Consumer<String> log = msg -> logger.info(() -> msg);
        Consumer<String> print = System.out::println;

        Predicate<String> nonNull = Objects::nonNull;
        Predicate<String> evenLength = s -> s.length() % 2 == 0;
        stringsWithNulls.stream()
                .filter(nonNull.and(evenLength))  // function composition with Predicates
                .forEach(log.andThen(print));     // function composition with Consumers

        // f: A -> B, g: B -> C, (g.f)(x) = g(f(x)), A -> C
        Function<String, Integer> length = String::length;
        Function<Integer, String> toBinary = Integer::toBinaryString;
        Function<String, String> lengthToBinary = compose(length, toBinary);
        stringsWithNulls.stream()
                .filter(nonNull.and(evenLength))
                .map(lengthToBinary)
                .forEach(System.out::println);
    }

    // generated by GitHub Copilot, but looks good
    private <A, B, C> Function<A, C> compose(Function<A, B> f, Function<B, C> g) {
        return x -> g.apply(f.apply(x));
    }
}
